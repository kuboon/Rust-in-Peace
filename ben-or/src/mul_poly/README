-------------------------------------------------------------------------------
DISCLAIMER
-------------------------------------------------------------------------------

If you are an FIT student, please do not copy without permission. Consult 
the CS honor code: http://www.cs.fit.edu/~wds/program/cshonor/

-------------------------------------------------------------------------------
ABOUT
-------------------------------------------------------------------------------

Programming project for FIT CSE 5211 Analysis of Algorithms course.

Contains three different implementations of polynomial multiplication, all
of which are based on the FFT algorithm.

   1. Recursive
   2. Iterative
   3. Parallel
   
The recursive and iterative implementations will execute on the CPU, and the 
parallel implementation will execute on the GPU, using OpenCL.

For each implementation, you can verify the answer is correct by multiplying
polynomials in Matlab or Octave and verifying it matches the output
of the program.

Example:

   [by hand]

                       x^2 +  2x + 4
                    * 3x^2 +  2x + 1
                    ----------------
                       x^2 +  2x + 4
              2x^3 +  4x^2 +  8x
       3x^4 + 6x^3 + 12x^2
       -----------------------------
       3x^4 + 8x^3 + 17x^2 + 10x + 4
             
   [using octave]

      > round(abs(ifft(fft([4 2 1], 8).*fft([1 2 3], 8), 8)))
      ans = 
      
          4   10   17    8    3    0    0    0
   
   [using recursive_fft]

      $ ./polymul.exe
      3
      4 2 1
      1 2 3

      Printing coefficients for x^k:
      [0] = 4
      [1] = 10
      [2] = 17
      [3] = 8
      [4] = 3
      [5] = 0
      [6] = 0

              
-------------------------------------------------------------------------------
DIRECTORY STRUCTURE
-------------------------------------------------------------------------------

/Polynomial_Multiplication
   README                        This File
   common_defs.h                 Common definitions used in all 3 implementations
   common_defs.c                 Common functions used in all 3 implementations
   recursive_fft.c               Recursive FFT implementation
   iterative_fft.c               Iterative FFT implementation
   main.c                        Main driver
   /opencl                       Parallel FFT implementation and OpenCL examples
   
-------------------------------------------------------------------------------
BUILD PROCESS
-------------------------------------------------------------------------------

$ make

This will build three different executables:

   1. recursive_fft.exe
      
      Reads a set of polynomial coefficients from stdin and evaluates them at
      complex roots of unity using the recursive FFT algorithm
      
   2. timed_fft.exe
   
      Executes the recursive FFT algorithm with random coefficients with
      increasing powers of 2

   3. polymul.exe
   
      Reads two sets of polynomial coefficients from stdin and multiplies the
      corresponding polynomials
      